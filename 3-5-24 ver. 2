package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

//import edu.wpi.first.wpilibj.motorcontrol.MotorController;
//import edu.wpi.first.wpilibj.motorcontrol.PWMMotorController;
//import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
//import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.Servo;
//import java.time.Clock;
import java.util.Optional;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
//import edu.wpi.first.units.Time;
//import edu.wpi.first.cameraserver.*;

//import edu.wpi.first.wpilibj.util.Color;
//import frc.robot.Robot.yValue;
//import frc.robot.Robot.zValue;
import edu.wpi.first.wpilibj.DriverStation.*;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;

public class Robot extends TimedRobot {

 private static final String kDefaultAuto = "Default"; // SmartDashboard modes (autonomous objects)
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected; //String that holds the current selected mode
  private final SendableChooser<String> m_chooser = new SendableChooser<>();//Object that chooses between modes

  //decalring intigers (PWM ports) for motor controllers
  private static final int frontLeftWheel = 3;   // setting up wheel motors to their PWM ports on the RobotRIO
  private static final int backLeftWheel = 2;
  private static final int frontRightWheel = 1;
  private static final int backRightWheel = 0;
 
 private static final int intake1 = 4;
 private static final int intake2 = 5;
 
 private static final int shooter1 = 6;
 private static final int shooter2 = 7;
 private static final int shooter3 = 8;

  private static final int winchArm1 = 9;

  //declaring integers (DIO ports) for sensors 
  private static final int HALT = 0;
  private static final int CEASE = 1;

  //Servos 
  Servo servo1 = new Servo(9);
  Servo servo2 = new Servo(10);

  //int replay = 0;
 
  //double output;
  private double startTime;

  /*This seems to be a really risky way to code ultrasonic sensors. From some little investigation,
  it seems like using the Roborio's I2C port can lead to SYSTEM LOCKOUTS! The frequecy of these lockouts depends on
  different factors, and there doesn't seem to be workarounds avaliable to us. I'll research this and discuss this more later.
  Seems best to just use Analog inputs for the ultrasonic sensor.*/

  //private final I2C.Port i2cPort = I2C.Port.kOnboard;

  private static final int gamer = 0; //sets up joystick to connect to usb port 1 on the laptop/computer

  private static final int UsonPort = 0; //ultrasonic analog port (aka Analog In on the RobotRIO)
  private static AnalogPotentiometer sensor = new AnalogPotentiometer (UsonPort,180,30); //The sensor object itself
  //Analog ultrasonics seem to be used best with this class.

  //Seems like I'll need to figure out some sort of formula for analong sensors to covert the voltage into distance,
  //this is going to be a pain.


  private static final double USonHoldDist = 12.0; //ultrasonic sensor limited before it stops the robot(in inches)
  private static final double MathValToDist = 0.125; //set value used to convert sensor values to inches
  

  private final AnalogInput AUsonIn = new AnalogInput(UsonPort); //gives the ultrasonic sensor a name



  private DifferentialDrive mecaTibbs; //gives the drive train a name
  private Joystick gStick;  //gives the joystick a name


  
  //Left Motor controllers
  PWMVictorSPX m_frontLeft = new PWMVictorSPX(frontLeftWheel);//3
  PWMVictorSPX m_backLeft = new PWMVictorSPX(backLeftWheel);//2 M,KL
  
  //Right Motor controllers
  PWMVictorSPX m_frontRight = new PWMVictorSPX(frontRightWheel);//1
  PWMVictorSPX m_backRight = new PWMVictorSPX(backRightWheel);//0
  //Intake Motor controllers
  PWMSparkMax m_intakeleft = new PWMSparkMax(intake1);
  PWMSparkMax m_intakeright = new PWMSparkMax(intake2);
  // The shooter Moter controllers.
  PWMSparkMax m_shooter1 = new PWMSparkMax(shooter1);
  PWMSparkMax m_shooter2 = new PWMSparkMax(shooter2);
  PWMSparkMax m_shooter3 = new PWMSparkMax(shooter3);

  PWMSparkMax m_winchArm1 = new PWMSparkMax(winchArm1);

//Automatically gets what alliance we are on.
 Optional<Alliance> teamAlliance = DriverStation.getAlliance();
 


  
  DigitalInput DomGoth = new DigitalInput(HALT);
  DigitalInput SubFemboy= new DigitalInput(CEASE);

  
  
  autoBot autonomousBot;

  //Limelight variables
  NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
  double limelightMountAngleDegrees = 0; 
  double limelightLensHeightInches = 22; 

  //Delay variable for autonomus
  double autoDelay;

  //Apriltag IDS and heights
  public int midSpeakerID;
  public int sideSpeakerID;
  public double speakerTagHeight = 57.13;
  
  public int centerStageID;
  public int leftStageID;
  public int rightStageID;
  public double stageHeight;

  public int ampID;
  public double ampHeight;

  public int leftSourceID;
  public int rightSourceID;
  public double sourceHeight;

  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {
    m_chooser.setDefaultOption("April Tester", kDefaultAuto); //Creates options for the dashboard
    m_chooser.addOption("Back shooter", kCustomAuto);
    SmartDashboard.putData("Auto choices", m_chooser);//Uploads the options to the dashboard
    
    //CameraServer.startAutomaticCapture().setResolution(240,180);

    //Motor Controller followers (Do we want to esablish this here, in the Init methods for teleop and autonomous, or just teleop?)
    m_frontLeft.addFollower(m_backLeft);
    m_frontRight.addFollower(m_backRight);

    m_intakeleft.addFollower(m_intakeright);
    // 
    m_shooter1.addFollower(m_shooter2);
    m_shooter1.addFollower(m_shooter3);

    m_frontRight.setInverted(true);
    m_backRight.setInverted(false);
    m_frontLeft.setInverted(false); //flips the left side of motors for wheels
    m_backLeft.setInverted(false);//false cause... not needed this year
 
    mecaTibbs = new DifferentialDrive(m_frontLeft, m_frontRight); //hooks up the drive train with the PWM motors that are linked to the wheels
                                                 
    mecaTibbs.setExpiration(0.1);//For safety

    gStick = new Joystick(gamer); //hooks up joysick to the usb port that is connected to the joystick
    
  }

  @Override
  public void robotPeriodic(){
    mecaTibbs.setSafetyEnabled(true);
    
    
    NetworkTableEntry tx = table.getEntry("tx");
    NetworkTableEntry ty = table.getEntry("ty");
    NetworkTableEntry ta = table.getEntry("ta");
    NetworkTableEntry tid = table.getEntry("tid");
  
    //read values periodically
    double x = tx.getDouble(0.0);
    double y = ty.getDouble(0.0);
    double area = ta.getDouble(0.0);
    double ID = tid.getDouble(0.0);
    

    //Code that gives the direction the limelight is facing
    double[] position = table.getEntry("botpose").getDoubleArray(new double[6]);

    double positionX = position[0]; //Current X,Y,Z values of the limelight on the field.
    double positionY = position[1];
    double positionZ = position[2];
    double yaw = position[5];//should give direction the limelight is pointing



    double targetOffsetAngle_Vertical = ty.getDouble(0.0);
  
    double angleToGoalDegrees = limelightMountAngleDegrees + targetOffsetAngle_Vertical;
    double angleToGoalRadians = angleToGoalDegrees * (3.14159 / 180.0);

    //calculate distance
    double distanceFromLimelightToGoalInches = (speakerTagHeight - limelightLensHeightInches) / Math.tan(angleToGoalRadians)/39.37;
    if(ID == -1){//Prevents inf distance value
      distanceFromLimelightToGoalInches =0;
    }

    //post to smart dashboard periodically
    SmartDashboard.putNumber("LimelightX", x);
    SmartDashboard.putNumber("LimelightY", y);
    SmartDashboard.putNumber("LimelightArea", area);
    SmartDashboard.putNumber("distance",distanceFromLimelightToGoalInches);
    SmartDashboard.putNumber("TOSA", targetOffsetAngle_Vertical);
    SmartDashboard.putNumber("ATGDegrees", angleToGoalDegrees);
    SmartDashboard.putNumber("ATGRadians", angleToGoalRadians);
    SmartDashboard.putNumber("AprilTagID", ID);

    SmartDashboard.putNumber("botPoseX", positionX);
    SmartDashboard.putNumber("botPoseY", positionY);
    SmartDashboard.putNumber("botPoseZ", positionZ);
    SmartDashboard.putNumber("botPoseYaw", yaw);


    //Temporary IDs for testing
    SmartDashboard.putNumber("midSpeaker", midSpeakerID);
    SmartDashboard.putNumber("sideSpeaker", sideSpeakerID);
    SmartDashboard.putNumber("centerStage", centerStageID);
    SmartDashboard.putNumber("leftStage", leftStageID);
    SmartDashboard.putNumber("rightStage", rightStageID);
    SmartDashboard.putNumber("amp", ampID);
    SmartDashboard.putNumber("leftSource", leftSourceID);
    SmartDashboard.putNumber("rightSource", rightSourceID);


  }


  @Override
  public void autonomousInit() {
    startTime = Timer.getFPGATimestamp();
 
    m_autoSelected = m_chooser.getSelected();
    
    autonomousBot = new autoBot();

    autoDelay = SmartDashboard.getNumber("Delay",0);
  }

  
  /*
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
   double time = Timer.getFPGATimestamp();
   
    //Sets up network table and gets coordinates of the aprilltag relative to limelight
    NetworkTableEntry tx = table.getEntry("tx");
    NetworkTableEntry ty = table.getEntry("ty");
    NetworkTableEntry ta = table.getEntry("ta");
    NetworkTableEntry tid = table.getEntry("tid");

    //read values periodically
    double x = tx.getDouble(0.0);
    double y = ty.getDouble(0.0);
    double area = ta.getDouble(0.0);
    double ID = tid.getDouble(0.0);
    
    double targetOffsetAngle_Vertical = ty.getDouble(0.0);
  
    double angleToGoalDegrees = limelightMountAngleDegrees + targetOffsetAngle_Vertical;
    double angleToGoalRadians = angleToGoalDegrees * (3.14159 / 180.0);

    //calculate distance
    double distanceFromLimelightToGoalInches = (speakerTagHeight - limelightLensHeightInches) / Math.tan(angleToGoalRadians)/39.37;

    if(ID == -1){
      distanceFromLimelightToGoalInches =0;

    }
  
    switch (m_autoSelected) {
     case kDefaultAuto:

     autonomousBot.basicMode(autoDelay, time);
    
     break;
        
     case kCustomAuto:
       
     autonomousBot.speakerMode(autoDelay, time);
      
    break;
  }
}
  

/* 
  Small section of previous auto Code for example, use GitHUb to find entire code.


    if(time - startTime < 1){//Moving to payload dropoff quickly with arm2 moving up
      m_frontLeft.set(0.1);//Arm1 doesn't move here or else the arm mechanism will get slammed into the ground
      m_frontRight.set(0.1);
      m_backLeft.set(0.1);
      m_backRight.set(0.1);

      }
    else if((time - startTime >= 1  && time - startTime < 2)){ //Moving to payload dropoff slowly with arm2 slowly going up and arm1 going down
      m_frontLeft.set(0.1);                             //Now arm1 can go up without the arm hitting/bumping the ground
      m_frontRight.set(0.1);
      m_backLeft.set(0.1);
             
    } 
*/






  // This function is called periodically during operator control.
  @Override
  public void teleopPeriodic() {
    //xValue xylophone = new xValue(gStick.getX());
    yValue yylophone = new yValue(gStick.getY());
    zValue zylophone = new zValue(gStick.getZ());
    //wValue wylophone = new wValue(gStick.getRawAxis(3));
    //Fricker Shaquille = new Fricker(gStick.getThrottle());
  
    
    
    NetworkTableEntry tx = table.getEntry("tx");
    NetworkTableEntry ty = table.getEntry("ty");
    NetworkTableEntry ta = table.getEntry("ta");
    NetworkTableEntry tid = table.getEntry("tid");
  
    //read values periodically
    double x = tx.getDouble(0.0);
    double y = ty.getDouble(0.0);
    double area = ta.getDouble(0.0);
    double ID = tid.getDouble(0.0);
    
    double targetOffsetAngle_Vertical = ty.getDouble(0.0);
  
    double angleToGoalDegrees = limelightMountAngleDegrees + targetOffsetAngle_Vertical;
    double angleToGoalRadians = angleToGoalDegrees * (3.14159 / 180.0);

    //calculate distance
    double distanceFromLimelightToGoalInches = (speakerTagHeight - limelightLensHeightInches) / Math.tan(angleToGoalRadians);
  
    if(ID == -1){
      distanceFromLimelightToGoalInches =0;
      
    }

    mecaTibbs.arcadeDrive(yylophone.yJoy(), zylophone.zJoy(), false); //sets driving to run using joystick controls
                                                                                 
                                                                                                                                    
    //distance check
    if(gStick.getRawButton(1) == true){
    System.out.println(distanceFromLimelightToGoalInches);
    }


    //Placeholder
    if(gStick.getRawButton(4)==true){
      m_intakeleft.set(.4);
    } else if(gStick.getRawButton(3)){
      m_intakeleft.set(-.4);
    } else{
      m_intakeleft.set(0);
    }

    if(gStick.getRawButton(6) == true){
      m_shooter1.set(0.6);
    } else {
      m_shooter1.set(0);
    }
    if(gStick.getRawButton(7) == true){
      m_winchArm1.set(0.7);
    } else {
      m_winchArm1.set(0);
    }

  
    

     /*  Investigate what kind of code this is later.
     
     try{
        Thread.sleep(500);
      }
      catch (InterruptedException ex){
        Thread.currentThread().interrupted();
      }
      hammerTime.set(-0.5);
      try{
        Thread.sleep(500);
      }
      catch (InterruptedException ex){
        Thread.currentThread().interrupted();
        hammerTime.set(0);
    } */
   /*  if (DomGoth.get()==false){
      output = Math.min(output, 0);
    }
    else if (SubFemboy.get()==false){
      output = Math.max(output, 0);}
    }
    MeganTheeStallion.set((-output));
    DojaCat.set(output/2);
*/




   Timer.delay(0.001);
   //timer sets up the code to have a 1 millisecond delay to avoid overworking and 
   //over heating the RobotRIO
    }  








   // This function is called periodically during test mode.
  @Override
  public void testPeriodic() {
  }







@Override
public void simulationInit(){

}






@Override
public void simulationPeriodic() {
  
}

class autoBot {
  public autoBot() {
  

  double[] position = table.getEntry("botpose").getDoubleArray(new double[6]);

    double positionX = position[0];
    double positionY = position[1];
    double positionZ = position[2];
    double yaw = position[5];

 //final position X and Y are desired botpose coordinates
    double finalPositionX=0;
    double finalPositionY=0;
    double yawDisplacement;
    double finalYaw=0;

//allows initial yaw, y, and x cooordinate to be unchanged
    final double startYaw = yaw;
    final double startY = positionY;
    final double startX = positionX; 

  //Automatically initiates the aprilTag IDs to the ones present on our side of the field(Red or Blue)
  if(teamAlliance.get() == Alliance.Red) {
    midSpeakerID = 4;
    sideSpeakerID = 3;
    centerStageID = 13;
    leftStageID = 11;
    rightStageID = 12;
    leftSourceID = 2;
    rightSourceID = 1;
    ampID = 5;

    finalPositionX = 5;
    finalPositionY = 5;    
  }else if(teamAlliance.get() == Alliance.Blue) {
    midSpeakerID = 7;
    sideSpeakerID = 8;
    centerStageID = 14;
    leftStageID = 15;
    rightStageID = 16;
    leftSourceID = 10;
    rightSourceID = 9;
    ampID = 6;

    
    finalPositionX = 8;
    finalPositionY = 8;

  }
  yawDisplacement = Math.toDegrees(Math.atan((finalPositionY-startY)/(finalPositionX-startX)));
  if(finalPositionY<0){
finalYaw = startYaw + yawDisplacement;
  }else if(finalPositionY>0){
    finalYaw =startYaw - yawDisplacement;
  }
 while(yaw !=finalYaw){
 if(yaw<finalYaw){
 m_frontLeft.set(.5);
 m_frontRight.set(-.5);
 }else if(yaw>finalYaw){
 m_frontLeft.set(-.5);
 m_frontRight.set(.5);
 }
}
  } 


public void basicMode(double secondDelay, double initTime) {

  classTime = initTime - secondDelay;
  allTime = classTime - startTime; 

  if(allTime >= 0 && allTime < 2) {
    m_frontLeft.set(-.4);
    m_frontRight.set(-.4);
    m_intakeleft.set(.4);
    m_intakeright.set(.4);

  } else if (allTime >= 2 && allTime < 4) {
      m_frontLeft.set(.4);
      m_frontRight.set(.4);
      m_intakeleft.set(0);
      m_intakeright.set(0);
  } else if (allTime >= 4 && allTime < 6) {
      m_frontLeft.set(0);
      m_frontRight.set(0);
      m_intakeleft.set(0);
      m_intakeright.set(0);
  } 
}



public void speakerMode(double secondDelay, double initTime){

  classTime = initTime - secondDelay;
  if(allTime < 1 && allTime>= 0){
    m_frontLeft.set(-.3);
    m_frontRight.set(-.3);
 } else if ( allTime >= 1 && allTime < 2){

 }
}

double classTime;
double allTime;
char teamsplatoon;
}

class autoStop{
  public autoStop(){

  }
}

class yValue{
  public yValue(double y){
    yCal = y;
  }
  public double yJoy(){
    if((yCal <= 0.3) && (yCal >= 0.0)){
      return 0.0;
    }
    else if(yCal > 0.3){
      return -yCal;
    }
    else if((yCal >= -0.3) && (yCal <= 0.0)){
      return 0.0;
    }
    else if(yCal < -0.3){
      return -yCal;
    }
    else{
      return 0.0;
    }
  }
  public double yCal;
}

class xValue{
  public xValue(double x){
    xCal = x;
  }
public double xJoy(){
  if((xCal <= 0.3) && (xCal >= 0.0)){
    return 0.0;
  }
  else if(xCal > 0.3){
    return xCal;
  }
  else if((xCal >= -0.3) && (xCal <= 0.0)){
    return 0.0;
  }
  else if(xCal < -0.3){
    return xCal;
  }
  else{
    return 0.0;
  }
}
public double xCal;
}

class zValue{
  public zValue(double z){
    zCal = z;
  }
public double zJoy(){
  if((zCal <= 0.4) && (zCal >= 0.0)){
    return 0.0;
  }
  else if(zCal > 0.4){
    return (zCal * -0.5);
  }
  else if((zCal >= -0.4) && (zCal <= 0.0)){
    return 0.0;
  }
  else if(zCal < -0.4){
    return (zCal * -0.5);
  }
  else{
    return 0.0;
  }
}

public double zCal;
}

class wValue{
  public wValue(double w){
    wCal = w;
  }
  public double wSlide(){
    return (-wCal+1)/2;

  }
  public double wCal;

}

class Fricker{

  public Fricker(double f){
    fCal = f;
  }
  public double fThot(){
    if((fCal <= 0.4)&& (fCal >= 0.0)){
      return 0.0;
    }
    else if (fCal > 0.4){
      return -fCal;
    }
    else if((fCal >= -0.4) && (fCal <= 0.0)){
      return 0.0;
    }
    else if(fCal < -0.4){
      return -fCal;
    }
    else{
      return 0.0;
    }
  }
  public double fCal;
}
}
