package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.PWMMotorController;
//import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.Servo;
import java.time.Clock;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;

import edu.wpi.first.cameraserver.*;

import edu.wpi.first.wpilibj.util.Color;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DigitalInput;

public class Robot extends TimedRobot {

 private static final String redAlliance = "Red"; // SmartDashboard modes (autonomous objects)
  private static final String blueAlliance = "Blue";
  private static final String underAchiever = "Move Backwards";
  private String m_autoSelected; //String that holds the current selected mode
  private final SendableChooser<String> m_chooser = new SendableChooser<>();//Object that chooses between modes

  //decalring intigers (PWM ports) for motor controllers
  private static final int frontLeftWheel = 3;   // setting up wheel motors to their PWM ports on the RobotRIO
  private static final int backLeftWheel = 2;
  private static final int frontRightWheel = 1;
  private static final int backRightWheel = 0;
 

  private static final int intake= 7; //For the intake
  private static final int elevator = 4;//For the elevator
  private static final int arm = 5;//For the first motor of the arm
  private static final int slam = 8;//This is for flipping the cones
  private static final int arm2 = 6;//This is for the second motor of the arm

  //declaring integers (DIO ports) for sensors 
  private static final int HALT = 0;
  private static final int CEASE = 1;

  //Servos 
  Servo servo1 = new Servo(9);
  Servo servo2 = new Servo(10);

  //int replay = 0;
 
  //double output;
  private double startTime;

  /*This seems to be a really risky way to code ultrasonic sensors. From some little investigation,
  it seems like using the Roborio's I2C port can lead to SYSTEM LOCKOUTS! The frequecy of these lockouts depends on
  different factors, and there doesn't seem to be workarounds avaliable to us. I'll research this and discuss this more later.
  Seems best to just use Analog inputs for the ultrasonic sensor.*/

  private final I2C.Port i2cPort = I2C.Port.kOnboard;

  private static final int gamer = 0; //sets up joystick to connect to usb port 1 on the laptop/computer



  private static final double USonHoldDist = 12.0; //ultrasonic sensor limited before it stops the robot(in inches)
  private static final double MathValToDist = 0.125; //set value used to convert sensor values to inches
  private static final int UsonPort = 0; //ultrasonic analog port (aka Analog In on the RobotRIO)

  private final AnalogInput AUsonIn = new AnalogInput(UsonPort); //gives the ultrasonic sensor a name



  private DifferentialDrive mecaTibbs; //gives the drive train a name
  private Joystick gStick;  //gives the joystick a name


  
  //Left Motor controllers
  PWMVictorSPX m_frontLeft = new PWMVictorSPX(frontLeftWheel);//3
  PWMVictorSPX m_backLeft = new PWMVictorSPX(backLeftWheel);//2 M,KL
  
  //Right Motor controllers
  PWMVictorSPX m_frontRight = new PWMVictorSPX(frontRightWheel);//1
  PWMVictorSPX m_backRight = new PWMVictorSPX(backRightWheel);//0

 
  


 /*
  //private final AnalogInput AUsonIn = new AnalogInput(UsonPort); //gives the ultrasonic sensor a name
  private DifferentialDrive mecaTibbs; //gives the drive train a name
  private Joystick gStick;  //gives the joystick a name

  PWMMotorController m_frontLeft = new PWMVictorSPX(frontLeftWheel);//3
  PWMMotorController m_backLeft = new PWMVictorSPX(backLeftWheel);//2 M,KL
  

 // MotorControllerGroup m_left = new MotorControllerGroup(m_frontLeft, m_backLeft);
  PWMMotorController m_frontRight = new PWMVictorSPX(frontRightWheel);//1
  PWMMotorController m_backRight = new PWMVictorSPX(backRightWheel);//0
 // MotorControllerGroup m_right = new MotorControllerGroup(m_frontRight, m_backRight);
 */
  
  
  DigitalInput DomGoth = new DigitalInput(HALT);//not important for now
  DigitalInput SubFemboy= new DigitalInput(CEASE);

  PWMSparkMax  sucker = new PWMSparkMax(intake); //7
  PWMSparkMax hammerTime = new PWMSparkMax(slam); //8
  PWMSparkMax  limb = new PWMSparkMax(arm);//5
  PWMSparkMax elevatorMusic = new PWMSparkMax(elevator);//4
  PWMSparkMax limb2 = new PWMSparkMax(arm2);//6
  
  

  //Limelight variables
  NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
  double limelightMountAngleDegrees = 0; 
  double limelightLensHeightInches = 21.375; 

  //Delay variable for autonomus
  double autoDelay;

  //Apriltag IDS and heights
  public int midSpeakerID;
  public int sideSpeakerID;
  public double speakerTagHeight = 57.13;
  
  public int centerStageID;
  public int leftStageID;
  public int rightStageID;
  public double stageHeight;

  public int ampID;
  public double ampHeight;

  public int leftSouceID;
  public int rightSourceID;
  public double sourceHeight;

  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {
    m_chooser.setDefaultOption("Move Backwards", underAchiever);
    m_chooser.addOption("Red", redAlliance); //Creates options for the dashboard
    m_chooser.addOption("Blue", blueAlliance);
    SmartDashboard.putData("Auto choices", m_chooser);//Uploads the options to the dashboard
    
    //CameraServer.startAutomaticCapture().setResolution(240,180);

    //Motor Controller followers (Do we want to esablish this here, in the Init methods for teleop and autonomous, or just teleop?)
    m_frontLeft.addFollower(m_backLeft);
    m_frontRight.addFollower(m_backRight);

    m_frontRight.setInverted(true);
    //m_backRight.setInverted(true);
    m_frontLeft.setInverted(false); //flips the left side of motors for wheels
    m_backLeft.setInverted(false);//false cause... not needed this year
 
    mecaTibbs = new DifferentialDrive(m_frontLeft, m_frontRight); //hooks up the drive train with the PWM motors that are linked to the wheels
                                                 
    mecaTibbs.setExpiration(0.1);//For safety

    gStick = new Joystick(gamer); //hooks up joysick to the usb port that is connected to the joystick
    
  
  /**
   * This function is called every robot packet, no matter the mode. Use
   * this for items like diagnostics that you want ran during disabled,
   * autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before
   * LiveWindow and SmartDashboard integrated updating.
   */
  }

  @Override
  public void robotPeriodic(){
    mecaTibbs.setSafetyEnabled(true);
    
    
    NetworkTableEntry tx = table.getEntry("tx");
    NetworkTableEntry ty = table.getEntry("ty");
    NetworkTableEntry ta = table.getEntry("ta");
    NetworkTableEntry tid = table.getEntry("tid");
  
    //read values periodically
    double x = tx.getDouble(0.0);
    double y = ty.getDouble(0.0);
    double area = ta.getDouble(0.0);
    double ID = tid.getDouble(0.0);
    
    double[] position = table.getEntry("botpose").getDoubleArray(new double[6]);

    double positionX = position[0];
    double positionY = position[1];
    double positionZ = position[2];
    double yaw = position[5];//should give direction the limelight is pointing



    double targetOffsetAngle_Vertical = ty.getDouble(0.0);
  
    double angleToGoalDegrees = limelightMountAngleDegrees + targetOffsetAngle_Vertical;
    double angleToGoalRadians = angleToGoalDegrees * (3.14159 / 180.0);

    //calculate distance
    double distanceFromLimelightToGoalInches = (speakerTagHeight - limelightLensHeightInches) / Math.tan(angleToGoalRadians)/39.37;
    if(ID == -1){
      distanceFromLimelightToGoalInches =0;
    }

    //post to smart dashboard periodically
    SmartDashboard.putNumber("LimelightX", x);
    SmartDashboard.putNumber("LimelightY", y);
    SmartDashboard.putNumber("LimelightArea", area);
    SmartDashboard.putNumber("distance",distanceFromLimelightToGoalInches);
    SmartDashboard.putNumber("TOSA", targetOffsetAngle_Vertical);
    SmartDashboard.putNumber("ATGDegrees", angleToGoalDegrees);
    SmartDashboard.putNumber("ATGRadians", angleToGoalRadians);
    SmartDashboard.putNumber("AprilTagID", ID);

    SmartDashboard.putNumber("botPoseX", positionX);
    SmartDashboard.putNumber("botPoseY", positionY);
    SmartDashboard.putNumber("botPoseZ", positionZ);
    SmartDashboard.putNumber("botPoseYaw", yaw);



    SmartDashboard.putNumber("autoDelay", 0);
    SmartDashboard.putBoolean("alliance", true );
  }
  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the dashboard. The sendable
   * chooser code works with the Java SmartDashboard. If you prefer the
   * LabVIEW Dashboard, remove all of the chooser code and uncomment the
   * getString line to get the  auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to
   * the switch structure below with additional strings. If using the
   * SendableChooser make sure to add them to the chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    startTime = Timer.getFPGATimestamp();
 
    m_autoSelected = m_chooser.getSelected();
    
    autoDelay = SmartDashboard.getNumber("autoDelay",0);
  }

  
  /*
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
   double time = Timer.getFPGATimestamp();
   
    //Sets up network table and gets coordinates of the aprilltag relative to limelight
    NetworkTableEntry tx = table.getEntry("tx");
    NetworkTableEntry ty = table.getEntry("ty");
    NetworkTableEntry ta = table.getEntry("ta");
    NetworkTableEntry tid = table.getEntry("tid");

    //read values periodically
    double x = tx.getDouble(0.0);
    double y = ty.getDouble(0.0);
    double area = ta.getDouble(0.0);
    double ID = tid.getDouble(0.0);
    
    double targetOffsetAngle_Vertical = ty.getDouble(0.0);
  
    double angleToGoalDegrees = limelightMountAngleDegrees + targetOffsetAngle_Vertical;
    double angleToGoalRadians = angleToGoalDegrees * (3.14159 / 180.0);

    //calculate distance
    double distanceFromLimelightToGoalInches = (speakerTagHeight - limelightLensHeightInches) / Math.tan(angleToGoalRadians)/39.37;

    if(ID == -1){
      distanceFromLimelightToGoalInches =0;
    }
  
    switch (m_autoSelected) {
      case redAlliance:
      

        // Put default auto code here
        break;
        
    case blueAlliance:
     if(time-startTime < 5){
      //m_right.set (0.4);  
        
        // Put custom auto code here
      
     }
     break;

    case underAchiever:

    if(time-startTime <3){  
      m_frontLeft.set(-.5);
      m_frontRight.set(-.5);
      //code for sucking up note
    }else if(time-startTime>3 && time-startTime<4){
      m_frontLeft.set(0);
      m_frontRight.set(0);
    }
        break;
  }
}
  

  // This function is called periodically during operator control.
  @Override
  public void teleopPeriodic() {
    //xValue xylophone = new xValue(gStick.getX());
    yValue yylophone = new yValue(gStick.getY());
    zValue zylophone = new zValue(gStick.getZ());
    //wValue wylophone = new wValue(gStick.getRawAxis(3));
    //Fricker Shaquille = new Fricker(gStick.getThrottle());


m_frontLeft.addFollower(m_backLeft);
    m_frontRight.addFollower(m_backRight);
    
    NetworkTableEntry tx = table.getEntry("tx");
    NetworkTableEntry ty = table.getEntry("ty");
    NetworkTableEntry ta = table.getEntry("ta");
    NetworkTableEntry tid = table.getEntry("tid");
  
    //read values periodically
    double x = tx.getDouble(0.0);
    double y = ty.getDouble(0.0);
    double area = ta.getDouble(0.0);
    double ID = tid.getDouble(0.0);
    
    double targetOffsetAngle_Vertical = ty.getDouble(0.0);
  
    double angleToGoalDegrees = limelightMountAngleDegrees + targetOffsetAngle_Vertical;
    double angleToGoalRadians = angleToGoalDegrees * (3.14159 / 180.0);

    //calculate distance
    double distanceFromLimelightToGoalInches = (speakerTagHeight - limelightLensHeightInches) / Math.tan(angleToGoalRadians);
  
    if(ID == -1){
      distanceFromLimelightToGoalInches =0;
    }

    mecaTibbs.arcadeDrive(yylophone.yJoy(), zylophone.zJoy(), false); //sets driving to run using  //joystick controls
                                                                                   //joystick controls
                                                                                   
    //Intake and Outtake
    if(gStick.getRawButton(5) == true){//5 for normal joystick, 5 for alt
      sucker.set(-0.75);
    }
    else if(gStick.getRawButton(3) == true){//3 for normal joystick, 4 for alt
     sucker.set(0.75);
    }
    else{
    sucker.set(0.0);
    }
  
    //distance check
    if(gStick.getRawButton(1) == true){
    System.out.println(distanceFromLimelightToGoalInches);
    }
  
    if(gStick.getRawButton(12)){ //Carefully lowers the cone flipper
    hammerTime.set(-0.1);
    }

    //Elevator 
    if(gStick.getRawButton(6) == true){//6 for normal joystick, 2 for alt
    elevatorMusic.set(0.6);
    }
    else if(gStick.getRawButton(4)== true){//4 for normal joystick, 3 for alt
    elevatorMusic.set(-0.6);
    }
    else{
    elevatorMusic.set(0.0);
    }
  
    //Brakes 
    if(gStick.getRawButton(11)==true) {//11 for normal joystick, 8 for alt
    servo1.set(0);
    servo2.set(0);
    }
    if(gStick.getRawButton(12)==true){//12 for normal joystick, 9 for alt
    servo1.set(90);
    servo2.set(90);
    }


     /*  try{
        Thread.sleep(500);
      }
      catch (InterruptedException ex){
        Thread.currentThread().interrupted();
      }
      hammerTime.set(-0.5);
      try{
        Thread.sleep(500);
      }
      catch (InterruptedException ex){
        Thread.currentThread().interrupted();
        hammerTime.set(0);
    } */
   /*  if (DomGoth.get()==false){
      output = Math.min(output, 0);
    }
    else if (SubFemboy.get()==false){
      output = Math.max(output, 0);}
    }
    MeganTheeStallion.set((-output));
    DojaCat.set(output/2);
*/

   Timer.delay(0.001);
   
    }  //timer sets up the code to have a 1 millisecond delay to avoid overworking and 
          //over heating the RobotRIO

   // This function is called periodically during test mode.
  @Override
  public void testPeriodic() {
  }

@Override
public void simulationInit(){

}


@Override
public void simulationPeriodic(){
  
}

class autoBot{
  public autoBot(char teamcolor){
  teamsplatoon = teamcolor;
  //Automatically initiates the aprilTag IDs to the ones present on our side of the field(Red or Blue)
  if(teamsplatoon == 'r'|| teamsplatoon == 'R'){
    midSpeakerID = 4;
    sideSpeakerID = 3;
    centerStageID = 13;
    leftStageID = 11;
    rightStageID = 12;
    leftSouceID = 2;
    rightSourceID = 1;
    ampID = 5;
  }else if(teamsplatoon == 'b'|| teamsplatoon == 'B'){
    midSpeakerID = 7;
    sideSpeakerID = 8;
    centerStageID = 14;
    leftStageID = 15;
    rightStageID = 16;
    leftSouceID = 10;
    rightSourceID = 9;
    ampID = 6;
  }
  } 


public void basicMode(double secondDelay){

 classTime = startTime - secondDelay;
 if(classTime < 1 || classTime >= 0){

 } else if (1 <= startTime && startTime < 2 + secondDelay ){

 }
}

public void speakerMode(double secondDelay){

 classTime = startTime - secondDelay;
 if(classTime < 1 || classTime >= 0){

 } else if (1 <= startTime && startTime < 2 + secondDelay ){

 }
}

double classTime;
char teamsplatoon;
}

class yValue{
  public yValue(double y){
    yCal = y;
  }
  public double yJoy(){
    if((yCal <= 0.3) && (yCal >= 0.0)){
      return 0.0;
    }
    else if(yCal > 0.3){
      return -yCal;
    }
    else if((yCal >= -0.3) && (yCal <= 0.0)){
      return 0.0;
    }
    else if(yCal < -0.3){
      return -yCal;
    }
    else{
      return 0.0;
    }
  }
  public double yCal;
}

class xValue{
  public xValue(double x){
    xCal = x;
  }
public double xJoy(){
  if((xCal <= 0.3) && (xCal >= 0.0)){
    return 0.0;
  }
  else if(xCal > 0.3){
    return xCal;
  }
  else if((xCal >= -0.3) && (xCal <= 0.0)){
    return 0.0;
  }
  else if(xCal < -0.3){
    return xCal;
  }
  else{
    return 0.0;
  }
}
public double xCal;
}

class zValue{
  public zValue(double z){
    zCal = z;
  }
public double zJoy(){
  if((zCal <= 0.4) && (zCal >= 0.0)){
    return 0.0;
  }
  else if(zCal > 0.4){
    return (zCal * -0.5);
  }
  else if((zCal >= -0.4) && (zCal <= 0.0)){
    return 0.0;
  }
  else if(zCal < -0.4){
    return (zCal * -0.5);
  }
  else{
    return 0.0;
  }
}

public double zCal;
}

class wValue{
  public wValue(double w){
    wCal = w;
  }
  public double wSlide(){
    return (-wCal+1)/2;

  }
  public double wCal;

}

class Fricker{

  public Fricker(double f){
    fCal = f;
  }
  public double fThot(){
    if((fCal <= 0.4)&& (fCal >= 0.0)){
      return 0.0;
    }
    else if (fCal > 0.4){
      return -fCal;
    }
    else if((fCal >= -0.4) && (fCal <= 0.0)){
      return 0.0;
    }
    else if(fCal < -0.4){
      return -fCal;
    }
    else{
      return 0.0;
    }
  }
  public double fCal;
}
}
